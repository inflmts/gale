#!/bin/sh
# windconf - Gale configuration utility
#
# A simple grep-based utility for accessing and manipulating Gale's Windconf
# configuration system. The grep implementation must support the -m (GNU
# --max-count) option.
#

err() { printf >&2 'error: %s\n' "$1"; }
warn() { printf >&2 'warning: %s\n' "$1"; }

usage() {
  cat <<EOF
usage:
  windconf [-l|--list]
    dump configuration
  windconf -s|--set <key>=[<value>]...
    set keys
  windconf -u|--unset <key>...
    unset keys
  windconf -t|--test <key>...
    test for any of keys
  windconf -g|--get <key>...
    get first occurrence of any of keys
  windconf --wipe
    wipe configuration
options:
  --debug     show debugging output
EOF
}

# config directory
config_dir="${XDG_CONFIG_HOME:-$HOME/.config}/gale"
# config file
config_file="$config_dir/config"
# temporary config file
config_file_old="$config_file.old"

mode=
debug=

while [ "$#" -gt 0 ]; do
  # split single-character options
  case "$1" in -[!-]?*)
    rest="${1#-?}"
    set -- "${1%"$rest"}" "-$rest"
    ;;
  esac

  case "$1" in
    -l|--list)
      mode=list
      ;;
    -s|--set)
      mode=set
      ;;
    -u|--unset)
      mode=unset
      ;;
    -t|--test)
      mode=test
      ;;
    -g|--get)
      mode=get
      ;;
    --wipe)
      mode=wipe
      ;;
    --debug)
      debug=1
      ;;

    --help) usage; exit 0 ;;
    --) shift; break ;;
    -*) err "invalid option: $1"; exit 1 ;;
    *) break ;;
  esac
  shift
done

list_mode() {
  if [ "$#" -gt 0 ]; then
    err "too many arguments"
    exit 1
  fi

  # very simple config pretty-printer
  if [ -e "$config_file" ]; then
    column --table -s '=' -l 2 --table-columns KEY,VALUE "$config_file"
  fi
}

set_mode() {
  # only proceed if arguments are present
  [ "$#" -gt 0 ] || exit 0

  # backup config file if necessary
  if [ -e "$config_file" ]; then
    mv "$config_file" "$config_file_old" || exit
  fi

  mkdir -p "$config_dir" || exit

  { # edit existing configuration if applicable
    if [ -s "$config_file_old" ]; then
      # a `grep -Ex` pattern
      #   1.  isolate keys (remove '=<value>')
      #   2.  escape ERE metacharacters
      #   3.  match an optional value
      pattern="$(printf '%s\n' "$@" | sed -E \
        -e 's/=.*//' \
        -e 's/[\.\^\$\?\*\+\[\{\(\)\|\\]/\\&/g' \
        -e 's/$/(=.*)?/')"

      [ "$debug" ] && printf >&2 'pattern:\n%s\n' "$pattern"

      # pick existing entries that DON'T match the keys to be modified
      grep -Exv "$pattern" "$config_file_old"
    fi

    # add new entries
    printf '%s\n' "$@"
  } > "$config_file"
}

unset_mode() {
  # only proceed if arguments are present
  # and the config file has keys to delete
  [ "$#" -gt 0 ] && [ -s "$config_file" ] || exit 0

  # a `grep -Ex` pattern
  #   1.  escape ERE metacharacters
  #   2.  match an optional value
  pattern="$(printf '%s\n' "$@" | sed -E \
    -e 's/[\.\^\$\?\*\+\[\{\(\)\|\\]/\\&/g' \
    -e 's/$/(=.*)?/')"

  [ "$debug" ] && printf 'pattern:\n%s\n' "$pattern"

  # backup config file
  mv "$config_file" "$config_file_old" || exit

  mkdir -p "$config_dir" || exit

  # pick existing entries that don't match keys provided in the command line
  grep -Exv "$pattern" "$config_file_old" > "$config_file"

  exit 0
}

test_mode() {
  # only proceed if arguments are present
  # and the config file has keys in the first place
  [ "$#" -gt 0 ] && [ -s "$config_file" ] || exit 1

  # a `grep -Ex` pattern
  #   1.  escape ERE metacharacters
  #   2.  match an optional value (for keys passed in the command line without a
  #       value)
  pattern="$(printf '%s\n' "$@" | sed -E \
    -e 's/[\.\^\$\?\*\+\[\{\(\)\|\\]/\\&/g' \
    -e '/=/!s/$/(=.*)?/')"

  [ "$debug" ] && printf 'pattern:\n%s\n' "$pattern"

  grep -Exq "$pattern" "$config_file"
}

get_mode() {
  # only proceed if arguments are present
  # and the config file has keys in the first place
  [ "$#" -gt 0 ] && [ -s "$config_file" ] || exit 1

  # a `grep -Ex` pattern
  #   1.  escape ERE metacharacters
  #   2.  match an optional value
  pattern="$(printf '%s\n' "$@" | sed -E \
    -e 's/[\.\^\$\?\*\+\[\{\(\)\|\\]/\\&/g' \
    -e 's/$/=.*/')"

  [ "$debug" ] && printf 'pattern:\n%s\n' "$pattern"

  match="$(grep -Exm 1 "$pattern" "$config_file")" && \
    printf '%s\n' "${match#*=}"
}

wipe_mode() {
  if [ "$#" -gt 0 ]; then
    err "too many arguments"
    exit 1
  fi

  # psyche
  if [ -e "$config_file" ]; then
    mv "$config_file" "$config_file_old"
  fi
}

case "$mode" in
  set)    set_mode "$@" ;;
  unset)  unset_mode "$@" ;;
  test)   test_mode "$@" ;;
  get)    get_mode "$@" ;;
  wipe)   wipe_mode "$@" ;;
  *)      list_mode "$@" ;;
esac
