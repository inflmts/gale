#!/bin/sh
# galblueprint - generate the update blueprint
# ==============================================================================
#
#   This script generates the update blueprint (ninja build file) that galupd
#   uses to update Gale. This file is at ~/.data/gale/upd.ninja .
#
#   Commands in the update blueprint will be run with the current working
#   directory set to the home directory. Commands should only assume the
#   existence of the '.gale' directory, since it is the job of the updater to
#   place files elsewhere.
#
# Dependencies:
# - GNU coreutils

echo() { printf '%s\n' "$1"; }
diag() { printf >&2 '%s\n' "$1"; }

usage() {
  cat <<EOF
usage: $(basename "$0") [<option>...]
Generate the Gale update blueprint.

options:
  --stdout      print update blueprint to stdout
EOF
}

STDOUT=

for opt; do
  case $opt in
    --help)
      usage
      exit 0
      ;;
    --stdout)
      STDOUT=1
      ;;
    *)
      diag "error: invalid option: $opt"
      exit 1
      ;;
  esac
done

# chdir to home directory
cd || exit

esc_sh() {
  echo "$1" | sed "/[^0-9A-Za-z,./:+=_-]/{ s/'/'\\\\''/g; s/^/'/; s/\$/'/; }"
}

esc_sedrepl() {
  echo "$1" | sed 's/[&\/\\]/\\&/g'
}

# add_install <target> <source> [<mode>]
#
#   Produce a rule to copy <source> to <target> with the specified <mode>
#   (default is 644).
#
add_install() {
  cat <<EOF
build $1: install $2
  mode = ${3:-644}
EOF
}

# add_symlink <target> <source>
#
#   Produce a rule to create a symlink at <target> pointing to <source>.
#
add_symlink() {
  cat <<EOF
build $1: symlink
  target = $(realpath -ms --relative-to="$(dirname "$1")" "$2")
EOF
}

# add_bin <name>
#
#   Produce a rule to create a symlink at .local/bin/<name> pointing to
#   .gale/bin/<name> .
#
add_bin() {
  add_symlink ".local/bin/$1" ".gale/bin/$1"
}

# add_sed <target> <source> <script> [<mode>]
#
#   Produce a rule to apply the sed script <script> to <source> and store the
#   result at <target> with the speicifed <mode> (default is 644).
#
add_sed() {
  cat <<EOF
build $1: sed $2
  script = $(shquote "$3")
  mode = ${4:-644}
EOF
}

if [ -z "$STDOUT" ]; then
  mkdir -p .data/gale || exit
  rm -f .data/gale/upd.ninja.new || exit
  exec > .data/gale/upd.ninja.new
fi

# TODO: get values from configuration
ENABLE_SYSTEMD=1
ENABLE_WAYLAND=1
ENABLE_SWAY=1

#ENABLE_VIM_PLUG=
#if galconf --test --default=no vim-plug; then
#  ENABLE_VIM_PLUG=1
#fi

# BEGIN NINJA FILE GENERATION
# ==============================================================================

cat <<EOF
# Gale update blueprint
# Generated by galblueprint on $(date)

builddir = .data/gale

# stub rule for custom targets
rule custom
  command = exit 127

rule install
  description = INSTALL \$out
  command = install -m \$mode -T \$in \$out

rule symlink
  description = SYMLINK \$out
  command = ln -sf -T \$target \$out

rule sed
  description = SED \$out
  command = sed \$script \$in | install -m \$mode -T /dev/stdin \$out

build .data/gale/upd.ninja: custom | .gale/bin/galblueprint
  description = Regenerating update blueprint...
  command = .gale/bin/galblueprint
  generator = 1

build recomp: phony .data/gale/upd.ninja
EOF

echo
add_symlink .bashrc             .gale/core/bashrc
add_symlink .bash_profile       .gale/core/bash_profile
add_symlink .profile            .gale/core/profile
add_symlink .inputrc            .gale/core/inputrc
add_symlink .vimrc              .gale/core/vimrc
add_symlink .dialogrc           .gale/core/dialogrc
add_symlink .screenrc           .gale/core/screenrc
add_symlink .lesskey            .gale/core/lesskey

add_bin galupd
add_bin galconf
add_bin galblueprint
add_bin get-vim-plug
add_bin stupid

add_symlink .local/bin/n3       .gale/nnn/n3
add_symlink .local/bin/tn3      .gale/nnn/tn3
add_symlink .data/applications/tn3.desktop  .gale/nnn/tn3.desktop

for plugin in .gale/nnn/plugins/*; do
  if [ -f "$plugin" ]; then
    add_symlink .config/nnn/plugins/"$(basename "$plugin")" "$plugin"
  fi
done

echo
cat <<EOF
# bootstrap vim-plug
build .vim/autoload/plug.vim: custom
  description = Downloading vim-plug...
  command = .gale/bin/get-vim-plug
  generator = 1
EOF

if [ "$ENABLE_SYSTEMD" ]; then
  echo
  echo '# --- systemd ---'
fi

if [ "$ENABLE_WAYLAND" ]; then
  echo
  echo '# --- wayland ---'
  echo
  add_symlink .config/foot/foot.ini       .gale/wayland/foot.ini
  add_symlink .local/bin/wautosleep       .gale/wayland/wautosleep
fi

if [ "$ENABLE_SWAY" ]; then
  echo
  echo '# --- sway ---'
  echo
  add_symlink .config/sway/config         .gale/wayland/sway.conf
  add_symlink .local/bin/swaystatus       .gale/wayland/swaystatus
  add_symlink .local/bin/run-sway         .gale/wayland/run-sway
  add_symlink .local/bin/sway-output-mode .gale/wayland/sway-output-mode
fi

# END NINJA FILE GENERATION
# ==============================================================================

if [ -z "$STDOUT" ]; then
  # move the generated file in place
  mv -T .data/gale/upd.ninja.new .data/gale/upd.ninja
fi
