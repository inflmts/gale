#!/bin/sh
# configure - ninja build file generator

err() { printf >&2 'error: %s\n' "$1"; }
die() { printf >&2 'error: %s\n' "$1"; exit 1; }
warn() { printf >&2 'warning: %s\n' "$1"; }
echo() { printf '%s\n' "$1"; }

BUILDDIR=build
PREFIX="$HOME/.local"
BINDIR=
SYSTEMD=

for OPT; do
  case "$OPT" in
    --builddir=*) BUILDDIR=${OPT#*=} ;;
    --prefix=*) PREFIX=${OPT#*=} ;;
    --bindir=*) BINDIR=${OPT#*=} ;;
    --systemd) SYSTEMD=1 ;;
    *) die "invalid option: $OPT" ;;
  esac
done

BINDIR="${BINDIR:-$PREFIX/bin}"

# ninja-quote variable
nq() { printf '%s\n' "$1" | \
  sed 's/^ /$ /; s/\$/$$/g'; }
# ninja & shell-quote argument list
nqv() { [ "$#" -gt 0 ] && printf '%s\n' "$@" | sed "
/[^0-9A-Za-z,./:+=_-]/{
  s/'/'\\\\''/g
  s/\\\$/\$\$/g
  s/^/'/
  s/\$/'/
}" | tr '\n' ' '; }

{ # ============================================================================
  # BEGIN NINJA FILE GENERATION

cat <<END
# Ninja build file for Gale
# generated by configure

builddir = $(nq "$BUILDDIR")
homedir = $(nq "$HOME")
prefix = $(nq "$PREFIX")
bindir = $(nq "$BINDIR")

rule configure
  description = Configure Ninja
  command = ./configure $(nqv "$@")
  generator = yes
build build.ninja: configure | configure bin

install_mode = 644
rule install
  description = Install \$out
  command = install -Tm \$install_mode \$in \$out

build \$homedir/.bashrc: install bash/bashrc
build \$homedir/.bash_profile: install bash/login
build \$homedir/.inputrc: install misc/inputrc
build \$homedir/.vimrc: install vim/vimrc
build \$homedir/.dialogrc: install misc/dialogrc
build \$homedir/.screenrc: install misc/screenrc
build \$homedir/.lesskey: install misc/lesskey

END

  for bin in bin/*; do
    if [ -f "$bin" ] && [ -x "$bin" ]; then
cat <<END
build \$bindir/$(basename "$bin"): install $bin
  install_mode = 755
END
    fi
  done
  echo

  if [ "$SYSTEMD" ]; then
cat <<END
rule gen_env
  description = Generate systemd environment.d
  command = util/gen-env | install -Tm644 /dev/stdin \$out
build \$homedir/.config/environment.d/gale.conf: gen_env | util/gen-env

END
  fi

  # END NINJA FILE GENERATION
  # ============================================================================
} > build.ninja.new

# if nothing went wrong, then
# overwrite build.ninja with the generated file
mv build.ninja.new build.ninja
