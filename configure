#!/bin/sh
# configure - ninja build file generator

echo() { printf '%s\n' "$*"; }
diag() { printf >&2 '%s\n' "$*"; }
warn() { printf >&2 'warning: %s\n' "$*"; }
err() { printf >&2 'error: %s\n' "$*"; }
die() { printf >&2 'error: %s\n' "$*"; exit 1; }

usage() {
  cat <<\__EOF
usage: configure [<option>...]
options:
  --quiet             disable status
  --test              print generated ninja file to stdout
  --builddir=<path>   build directory (default: build)
  --prefix=<path>     static file directory (default: ~/.local)
  --bindir=<path>     executable directory (default: $PREFIX/bin)
  --libdir=<path>     utility directory (default: $PREFIX/lib/gale)
  --systemd           enable systemd
  --wayland           enable wayland
  --sway              enable sway
__EOF
}

QUIET=
TEST=

BUILDDIR=build
PREFIX="$HOME/.local"
BINDIR=
LIBDIR=
GALE_ENABLE_SYSTEMD=
GALE_ENABLE_WAYLAND=
GALE_ENABLE_SWAY=

# These variables MUST match those provided at runtime, or else strange things
# might happen!
XDG_CONFIG_HOME="$HOME/.config"
XDG_DATA_HOME="$HOME/.data"
XDG_STATE_HOME="$HOME/.state"
XDG_CACHE_HOME="$HOME/.cache"

for OPT; do
  case $OPT in
    --help)
      usage
      exit 0 ;;
    --quiet)
      QUIET=1 ;;
    --test)
      TEST=1 ;;
    --builddir=*)
      BUILDDIR=${OPT#*=} ;;
    --prefix=*)
      PREFIX=${OPT#*=} ;;
    --bindir=*)
      BINDIR=${OPT#*=} ;;
    --libdir=*)
      LIBDIR=${OPT#*=} ;;
    --systemd)
      GALE_ENABLE_SYSTEMD=1 ;;
    --wayland)
      GALE_ENABLE_WAYLAND=1 ;;
    --sway)
      GALE_ENABLE_WAYLAND=1
      GALE_ENABLE_SWAY=1 ;;
    *)
      die "invalid option: $OPT" ;;
  esac
done

BINDIR="${BINDIR:-$PREFIX/bin}"
LIBDIR="${LIBDIR:-$PREFIX/lib/gale}"

shquote() {
  [ "$#" -gt 0 ] && printf '%s\n' "$@" \
    | sed "/[^0-9A-Za-z,./:+=_-]/{ s/'/'\\\\''/g; s/^/'/; s/\$/'/; }; 1!s/^/ /" \
    | tr -d '\n'
}

sedreplquote() {
  echo "$1" | sed 's/[&\/\\]/\\&/g'
}

abled() {
  if [ "$1" ]; then
    echo ENABLED
  else
    echo DISABLED
  fi
}

sed_subst_libdir="s/@@LIBDIR@@/$(sedreplquote "$(shquote "$LIBDIR")")/"

if [ -z "$TEST" ]; then
  exec > build.ninja.new
fi

# add_install <target> <source> [<mode>]
add_install() {
  cat <<__EOF
build $1: install $2
  mode = ${3:-644}
__EOF
}

# add_symlink <target> <source>
add_symlink() {
  cat <<__EOF
build $1: symlink
  target = $(realpath "$2")
__EOF
}

# add_sed <target> <source> <script> [<mode>]
add_sed() {
  cat <<__EOF
build $1: sed $2
  script = $(shquote "$3")
  mode = ${4:-644}
__EOF
}

# show configuration information
cat >&2 <<__EOF
       build directory: $BUILDDIR
                prefix: $PREFIX
  executable directory: $BINDIR
     utility directory: $LIBDIR
               systemd: $(abled "$GALE_ENABLE_SYSTEMD")
               wayland: $(abled "$GALE_ENABLE_WAYLAND")
                  sway: $(abled "$GALE_ENABLE_SWAY")
__EOF

# ==============================================================================
# BEGIN NINJA FILE GENERATION

cat <<__EOF
builddir = $BUILDDIR
homedir = $HOME
bindir = $BINDIR
libdir = $LIBDIR
confdir = $XDG_CONFIG_HOME
datadir = $XDG_DATA_HOME

rule configure
  description = Configure Ninja
  command = ./configure $(shquote "$@")
  generator = 1
build build.ninja: configure | configure
build reconfigure: phony build.ninja

rule make_gitignore
  description = Generate Build Directory .gitignore
  command = echo \* > \$out
build \$builddir/.gitignore: make_gitignore

# GLOBAL RULES

rule install
  description = INSTALL \$out
  command = install -m \$mode -T \$in \$out

rule symlink
  description = SYMLINK \$target
  command = ln -sf -T \$target \$out

rule sed
  description = SED \$out
  command = sed \$script \$in | install -m \$mode -T /dev/stdin \$out
__EOF

echo
add_symlink \$homedir/.bashrc core/bashrc
add_symlink \$homedir/.bash_profile core/bash_profile
add_symlink \$homedir/.profile core/profile
add_symlink \$homedir/.inputrc core/inputrc
add_symlink \$homedir/.vimrc core/vimrc
add_symlink \$homedir/.dialogrc core/dialogrc
add_symlink \$homedir/.screenrc core/screenrc
add_symlink \$homedir/.lesskey core/lesskey

add_symlink \$bindir/autorankmirrors bin/autorankmirrors
add_symlink \$bindir/pacmenu bin/pacmenu
add_symlink \$bindir/upd-vim-plug bin/upd-vim-plug

add_symlink \$bindir/n3 nnn/n3
add_symlink \$bindir/gn3 nnn/gn3
add_symlink \$datadir/applications/gn3.desktop nnn/gn3.desktop

for plugin in "$PWD"/nnn/plugins/*; do
  if [ -f "$plugin" ]; then
    add_symlink "\$confdir/nnn/plugins/$(basename "$plugin")" "$plugin"
  fi
done

if [ "$GALE_ENABLE_SYSTEMD" ]; then
  echo
  cat <<__EOF
rule make_env
  description = Generate systemd environment.d
  command = util/gen-env > \$out
build \$homedir/.config/environment.d/gale.conf: make_env | util/gen-env
__EOF
fi

if [ "$GALE_ENABLE_WAYLAND" ]; then
  echo
  add_symlink \$confdir/foot/foot.ini wayland/foot.ini
  add_symlink \$bindir/wautosleep wayland/wautosleep
fi

if [ "$GALE_ENABLE_SWAY" ]; then
  echo
  add_sed \$confdir/sway/config wayland/sway.conf.in \
    "$sed_subst_libdir"
  add_symlink \$libdir/sway-i3status.conf wayland/i3status.conf
  add_symlink \$bindir/run-sway wayland/run-sway
  add_symlink \$bindir/sway-output-mode wayland/sway-output-mode
fi

# END NINJA FILE GENERATION
# ==============================================================================

if [ -z "$TEST" ]; then
  # move the generated file in place
  mv build.ninja.new build.ninja
fi
