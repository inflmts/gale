#!/bin/sh
# wautosleep - wayland autosleep controller using swayidle
#
# This file is part of Gale.
#
# This is a simple front-end to swayidle that puts the computer to sleep after a
# period of inactivity. It works for any compositor that swayidle supports, ie.
# any compositor that supports the idle protocol. $XDG_RUNTIME_DIR and
# $WAYLAND_DISPLAY must both be set.
#
# Dependencies:
#   - swayidle <https://github.com/swaywm/swayidle>
#

set -u

echo() { printf '%s\n' "$1"; }
diag() { printf >&2 '%s\n' "$1"; }
warn() { printf >&2 'warning: %s\n' "$1"; }
err() { printf >&2 'error: %s\n' "$1"; }

usage() {
  cat >&2 <<EOF
usage: wautosleep [<command>]
commands:
  status (default)
  on
  off
  toggle
  restart
  is-active
  autostart
EOF
}

if [ -z "${XDG_RUNTIME_DIR-}" ]; then
  err '$XDG_RUNTIME_DIR is not set!'
  exit 1
fi
if [ -z "${WAYLAND_DISPLAY-}" ]; then
  err '$WAYLAND_DISPLAY is not set!'
  exit 1
fi
pidfile="$XDG_RUNTIME_DIR/wautosleep.$WAYLAND_DISPLAY.pid"

loadpid() {
  [ -e "$pidfile" ] && read -r wpid pid < "$pidfile"
}

start() {
  gale-pid-start --try "$pidfile" ~/.gale/wayland/wautosleep-service
}

case $# in
  0) oper=status ;;
  1) oper=$1 ;;
  *) usage; exit 1 ;;
esac

case $oper in
  status)
    if loadpid; then
      echo "wautosleep is on (pid $wpid/$pid)"
    else
      echo "wautosleep is off"
    fi
    ;;
  on)
    start
    ;;
  off)
    loadpid && kill -- "$pid"
    ;;
  toggle)
    if loadpid; then
      kill -- "$pid"
    else
      start
    fi
    ;;
  restart)
    if loadpid; then
      kill -USR1 -- "$wpid"
    fi
    ;;
  is-active)
    # we only need the exit status
    loadpid
    ;;
  autostart)
    if [ "$(galconf get --bool --default=no wautosleep.autostart)" = yes ]; then
      start
    fi
    ;;
  *)
    usage
    exit 1
    ;;
esac
