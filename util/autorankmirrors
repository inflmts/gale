#!/bin/sh
# automatically download and rank pacman mirrors
#
#   Mirrors are downloaded from <https://archlinux.org/mirrorlist/> and sorted
#   using rankmirrors, available in the 'pacman-contrib' package.
#

echo() { printf '%s\n' "$*"; }
diag() { printf >&2 '%s\n' "$*"; }
warn() { printf >&2 'warning: %s\n' "$*"; }
err() { printf >&2 'error: %s\n' "$*"; }
die() { printf >&2 'error: %s\n' "$*"; exit 1; }

usage() {
  cat <<EOF
automatically download and rank pacman mirrors

usage: autorankmirrors [<option>...] [<country>]
options:
  -h        this help message
  -n <num>  randomly pick <num> mirrors
  -m <sec>  ranking operation timeout in seconds
  -v        be verbose
EOF
}

if [ "$1" = --help ]; then
  usage
  exit 0
fi

PICK=
TIMEOUT=
VERBOSE=
while getopts :hn:m:v OPT; do
  case "$OPT" in
    h)
      usage
      exit 0 ;;
    n)
      PICK=$OPTARG ;;
    m)
      TIMEOUT=$OPTARG ;;
    v)
      VERBOSE=1 ;;
    :)
      die "option requires an argument: $OPTARG" ;;
    *)
      die "invalid option: $OPTARG" ;;
  esac
done
shift "$((OPTIND - 1))"

case $# in
  0) COUNTRY=all ;;
  1) COUNTRY=$1 ;;
  *) die "too many arguments" ;;
esac

# ensure rankmirrors is installed
if ! command -v rankmirrors >/dev/null 2>&1; then
  err "rankmirrors is not installed"
  exit 1
fi

cleanup() {
  rm -f "$mirrorlist_src"
}

mirrorlist_src=$(mktemp /tmp/mirrorlist_src.XXXXXXXX)
trap cleanup HUP INT QUIT TERM

if ! curl -LfsS -o "$mirrorlist_src" "https://archlinux.org/mirrorlist/?country=$COUNTRY"; then
  cleanup
  die "unable to download pacman mirrorlist"
fi

sed -n 's/^#//; /^Server/p' "$mirrorlist_src" | (
  if [ "$PICK" ]; then
    shuf -n "$PICK"
  else
    cat
  fi
) | rankmirrors ${TIMEOUT:+-m "$TIMEOUT"} ${VERBOSE:+-v} -
excode=$?

cleanup
exit "$excode"
