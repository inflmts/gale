#!/bin/sh
# gale-pid - Gale pidfile utility
#
# This file is part of Gale.
#

set -u

echo() { printf '%s\n' "$*"; }
msg() { printf >&2 '%s\n' "$*"; }
warn() { printf >&2 'warning: %s\n' "$*"; }
err() { printf >&2 'error: %s\n' "$*"; }

usage() {
  cat <<EOF
usage: gale-pid <id> status
   or: gale-pid <id> start <command> [<arg>...]
   or: gale-pid <id> restart <command> [<arg>...]
   or: gale-pid <id> stop
   or: gale-pid <id> send <signal>
EOF
}

pid_start() {
  (set -C && : > "$pidfile") >/dev/null 2>&1 || return 0

  # This wrapper script will remove the pidfile when the command exits. We make
  # sure to close stdin when executing the command to avoid accidentally consuming
  # shell commands.
  #
  # The wrapper script ignores SIGHUP. If the wrapper script receives a kill
  # signal, it will attempt to terminate the child process. In addition, if the
  # wrapper script receives SIGUSR1, it will terminate and restart the child
  # process.

  setsid sh -s "$pidfile" "$@" >/dev/null 2>&1 <<\ENDSCRIPT &
pidfile=$1
shift
trap '' HUP
trap 'kill "$pid"' INT QUIT PIPE TERM USR2
trap 'restart=1; kill "$pid"' USR1
restart=1
while [ "$restart" ]; do
  restart=
  command "$@" <&- & pid=$!
  echo "$$ $pid" > "$pidfile"
  wait "$pid"
done
rm -f -- "$pidfile"
ENDSCRIPT
}

pid_load() {
  [ -e "$pidfile" ] && read -r wpid pid < "$pidfile"
}

if [ $# -lt 2 ]; then
  usage >&2
  exit 1
fi

id=$1
op=$2
shift 2

if [ -z "${XDG_RUNTIME_DIR-}" ]; then
  err '$XDG_RUNTIME_DIR is not set!'
  exit 1
fi

pidfile="$XDG_RUNTIME_DIR/gale-$id.pid"

case $op in
  status)
    if pid_load; then
      echo "$pidfile: running ($wpid/$pid)"
    else
      echo "$pidfile: not running"
    fi
    ;;
  start)
    if [ $# -eq 0 ]; then
      err "expected command"
      exit 1
    fi
    pid_start "$@"
    ;;
  restart)
    if [ $# -eq 0 ]; then
      err "expected command"
      exit 1
    fi
    if pid_load; then
      kill -USR1 "$wpid"
    else
      pid_start "$@"
    fi
    ;;
  stop)
    if pid_load; then
      kill "$pid"
    fi
    ;;
  send)
    if [ $# -ne 1 ]; then
      err "expected signal"
      exit 1
    fi
    if pid_load; then
      kill -s "$1" "$pid"
    fi
    ;;
  *)
    err "invalid command: $1"
    exit 1
    ;;
esac
