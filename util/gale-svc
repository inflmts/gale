#!/bin/sh
# ::::| ~/.local/bin/gale-svc

set -u

msg() { echo >&2 "$*"; }
warn() { echo >&2 "warning: $*"; }
err() { echo >&2 "error: $*"; }

usage() {
  cat >&2 <<EOF
usage: gale-svc <command> <service> [...]

Commands:
  status      report service status
  start       start service
  restart     restart service
  toggle      toggle service
  stop        stop service
  send <sig>  send signal to service
EOF
}

if [ $# -lt 2 ]; then
  usage
  exit 2
fi

command=$1
service=$2

if [ -z "${XDG_RUNTIME_DIR-}" ]; then
  err '$XDG_RUNTIME_DIR is not set!'
  exit 1
fi

if [ -n "${GALE_SVC_CONTEXT-}" ]; then
  prefix="$XDG_RUNTIME_DIR/gale.$GALE_SVC_CONTEXT"
else
  prefix="$XDG_RUNTIME_DIR/gale"
fi

pidfile="$prefix.$service.pid"
execfile="$HOME/.config/gale-svc/$service"

if [ ! -e "$execfile" ]; then
  err "no such service: $service"
  return 1
fi

check_service() {
  [ -e "$pidfile" ] && read -r wpid pid < "$pidfile"
}

start_service() {
  (set -C && : > "$pidfile") >/dev/null 2>&1 || return 0

  # This wrapper script will remove the pidfile when the command exits. We make
  # sure to close stdin when executing the command to avoid accidentally consuming
  # shell commands.
  #
  # The wrapper script ignores SIGHUP. If the wrapper script receives a kill
  # signal, it will attempt to terminate the child process. In addition, if the
  # wrapper script receives SIGUSR1, it will terminate and restart the child
  # process.

  setsid sh -s "$pidfile" "$execfile" >/dev/null 2>&1 <<\ENDSCRIPT &
trap '' HUP
trap 'kill "$pid"' INT QUIT PIPE TERM USR2
trap 'restart=1; kill "$pid"' USR1
restart=1
while [ "$restart" ]; do
  restart=
  "$2" <&- & pid=$!
  echo "$$ $pid" > "$1"
  wait "$pid"
done
rm -f -- "$1"
ENDSCRIPT
}

case $command in
status)
  if check_service; then
    echo "$service: running ($wpid/$pid)"
  else
    echo "$service: not running"
  fi
  ;;
start)
  start_service
  ;;
restart)
  if check_service; then
    kill -USR1 "$wpid"
  else
    start_service
  fi
  ;;
toggle)
  if check_service; then
    kill "$pid"
  else
    start_service
  fi
  ;;
stop)
  if check_service; then
    kill "$pid"
  fi
  ;;
send)
  if [ -z "${3-}" ]; then
    usage
    exit 2
  fi
  if check_service; then
    kill -s "$3" "$pid"
  fi
  ;;
*)
  err "invalid command: $command"
  exit 2
  ;;
esac
