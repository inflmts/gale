"
" Vim initialization file
"
" This file is part of Gale.
"
" Local configuration should be placed in:
"
"   ~/.config/gale/vimrc
"
" The following functions, if defined, affect the behavior of this file:
"
"   GalePlug()    register vim-plug plugins
"   GaleLate()    run after everything else
"

let s:config_file = $HOME .. "/.config/gale/vimrc"
if filereadable(s:config_file)
  exe "source " .. fnameescape(s:config_file)
endif

" PLUGINS
" ==============================================================================

" detect if vim-plug is installed
silent! if plug#begin()
  " install plugins
  Plug 'sainnhe/sonokai'
  "Plug 'preservim/nerdtree'
  "Plug 'fcpg/vim-altscreen'

  let g:sonokai_disable_italic_comment = 1
  let g:sonokai_transparent_background = 1
  let g:sonokai_spell_foreground = 'colored'
  let g:sonokai_disable_terminal_colors = 1
  let g:sonokai_better_performance = 1

  let g:NERDTreeShowHidden = 1
  let g:NERDTreeDirArrowExpandable = "+"
  let g:NERDTreeDirArrowCollapsible = "-"
  let g:NERDTreeCascadeSingleChildDir = 0

  let g:lsp_diagnostics_enabled = 1
  let g:lsp_diagnostics_echo_cursor = 1

  hi LspErrorText ctermfg=203 ctermbg=233

  " run plugin hooks
  if exists("*GalePlug")
    call GalePlug()
  endif

  call plug#end()

  " apply sonokai colorscheme
  silent! colorscheme sonokai
endif

" OPTIONS
" ==============================================================================

" backspace over everything
set backspace=indent,eol,start
" indentation
set et sw=2 sts=2 sta ai si
" searching
set is ic smartcase
" editing
set fo+=roj nojs
" scrolling
set nowrap so=5 ss=10 siso=10
" display
set number title fillchars=vert:â”‚
" automatically re-read a file if it is changed outside of vim
set autoread
" vsplit appears on right
set splitright
" command line completion
set wildmenu wildmode=longest:full,full

" added in Vim 9:
" use a popup menu for command line completions
if exists('&wildoptions')
  set wildoptions=pum
endif

" m     disable menu bar
" M     don't source menu.vim
" t     disable tearoff menu items
" T     disable toolbar
" l/L   disable left scrollbar (in split windows)
" r/R   disable right scrollbar (in split windows)
set go-=m go-=M go-=t go-=T go-=l go-=L go-=r go-=R
" enable the mouse in all modes
set mouse=a

" Use $XDG_CACHE_HOME/vim for swap, backup, and undo files.
let s:cache_dir = ($XDG_CACHE_HOME ?? ($HOME .. "/.cache")) .. "/vim"
let &dir = s:cache_dir .. "/swap//"
let &backupdir = s:cache_dir .. "/backup//"
let &undodir = s:cache_dir .. "/undo//"

" Create these directories if they don't exist.
call mkdir(&dir, 'p')
call mkdir(&backupdir, 'p')
call mkdir(&undodir, 'p')

" KEYBINDINGS
" ==============================================================================
"
" Tip: Use ':h map-table' to see map modes in a convenient table.

" Use <C-X> as a general shortcut for getting out of stuff.
noremap <C-X> <Esc>
noremap! <C-X> <Esc>

" Make space and backspace scroll the window.
noremap <Space> <C-D>
noremap <BS> <C-U>

" CTRL-J and CTRL-K move the cursor fast.
" CTRL-N and CTRL-P move the cursor even faster.
noremap <C-J> 5j
noremap <C-K> 5k
noremap <C-N> 10j
noremap <C-P> 10k

noremap H z<CR>
noremap M z.
noremap L z-

noremap <Leader>wl "=system('wl-paste -n')<CR>

nnoremap < <<
nnoremap > >>
xnoremap < <gv
xnoremap > >gv

cnoremap <C-A>  <Home>
cnoremap <C-E>  <End>
cnoremap <C-D>  <Del>
cnoremap <C-B>  <Left>
cnoremap <C-F>  <Right>
cnoremap <C-P>  <Up>
cnoremap <C-N>  <Down>

cnoremap <Esc>h <Left>
cnoremap <M-h>  <Left>
cnoremap <Esc>l <Right>
cnoremap <M-l>  <Right>
cnoremap <Esc>j <PageDown>
cnoremap <M-j>  <PageDown>
cnoremap <Esc>k <PageUp>
cnoremap <M-k>  <PageUp>
cnoremap <Esc>b <S-Left>
cnoremap <M-b>  <S-Left>
cnoremap <Esc>f <S-Right>
cnoremap <M-f>  <S-Right>

nnoremap <Leader>h <Cmd>LspHover<CR>

" Some terminals send focus events which vim sometimes doesn't recognize.
" Force vim to always recognize these escape sequences.
" See :h xterm-focus-event
execute "set <FocusGained>=\<Esc>[I"
execute "set <FocusLost>=\<Esc>[O"

" AUTOCOMMANDS
" ==============================================================================

au FileType * setlocal tw=80
au FileType sh setlocal fo-=t
au FileType markdown setlocal et sw=2 sts=2 tw=80
au FileType make setlocal noet

" GENERAL
" ==============================================================================

filetype plugin indent on
syntax enable

hi LineNr ctermbg=233 guibg=#222226
hi Error ctermfg=7 ctermbg=203
hi ErrorText cterm=underline ctermfg=203
hi! link SignColumn LineNr

" color trailing whitespace red, since trailing space is death
hi TrailSpace ctermbg=1 guibg=#ff0000
au VimEnter * match TrailSpace /\s\+$/
au WinNew * match TrailSpace /\s\+$/

if &term == "linux"
  hi Visual cterm=reverse
endif

if has('linux')
  " :Fork {command}
  "
  "   Fork a command using setsid(1).
  "
  " For some reason, this sometimes messes up the screen. Use redraw to fix.
  command! -nargs=1 -complete=shellcmd Fork
        \ silent execute "!setsid -f >/dev/null 2>&1"
        \ &shell &shellcmdflag shellescape(<q-args>, 1) | redraw!
endif

" :R
"
"   Reload vim (that is, re-source ~/.vimrc).
"
command! R source ~/.vimrc

" GIT INTEGRATION
" ==============================================================================

function! GaleGitStatus() abort
  term git --no-pager status
  noremap <buffer> q <C-W>q
endfunction

function! GaleGitDiffIndex() abort
  term git --no-pager diff --stat
  noremap <buffer> q <C-W>q
endfunction

function! GaleGitDiffHead() abort
  term git --no-pager diff --stat HEAD
  noremap <buffer> q <C-W>q
endfunction

noremap <Leader>gs <Cmd>call GaleGitStatus()<CR>
noremap <Leader>gd <Cmd>call GaleGitDiffIndex()<CR>
noremap <Leader>gD <Cmd>call GaleGitDiffHead()<CR>

" LF INTEGRATION
" ==============================================================================

if !exists("g:gale_lf_buf")
  let g:gale_lf_buf = -1
endif
if !exists("g:gale_lf_client_id")
  let g:gale_lf_client_id = -1
endif

" GaleLf()
"
"   Opens or focuses an lf explorer window.
"
function! GaleLf() abort
  if bufexists(g:gale_lf_buf)
    let winnr = bufwinnr(g:gale_lf_buf)
    if winnr != -1
      " focus the lf window
      exe winnr .. "wincmd w"
    else
      " open the lf buffer in a new window
      exe "topleft vertical sbuffer" g:gale_lf_buf
    endif
  else
    " start lf in a new window
    topleft vertical let g:gale_lf_buf = term_start($HOME .. "/.gale/vim/lf", {
          \ "term_finish": "close",
          \ "term_cols": 30,
          \ "term_kill": "term",
          \ "term_api": "GaleLfRecv" })
    setlocal winfixwidth
    setlocal statusline=lf
    " swap lf command line and vim command line triggers
    tnoremap <buffer> : <C-W>:
    tnoremap <buffer> <C-W>: :
  endif
endfunction

" GaleLfSendDir({dir})
"
"   Commands lf to change directory to {dir}.
"
function! GaleLfSendDir(dir) abort
  if g:gale_lf_client_id != -1
    " directory quoted as lf command argument
    let dir = '"' .. a:dir
          \ ->fnamemodify(':p')
          \ ->substitute('\\', '\\\\', 'g')
          \ ->substitute('"', '\\"', 'g') .. '"'
    " command to send to the lf server
    let command = "send " .. g:gale_lf_client_id .. " cd " .. dir
    let output = systemlist("lf -remote " .. shellescape(command, 1))
    for line in output
      echomsg line
    endfor
  endif
endfunction

" GaleLfRecvClientId({buf}, {id})
"
"   API endpoint for receiving the lf client id, which is stored in
"   g:gale_lf_client_id.
"
function! GaleLfRecvClientId(buf, id) abort
  if type(a:id) == v:t_number
    let g:gale_lf_client_id = a:id
  endif
endfunction

" GaleLfRecvOpen({buf}, {file})
"
"   API endpoint for opening {file} from lf. {file} should be a full path.
"
function! GaleLfRecvOpen(buf, file) abort
  if type(a:file) == v:t_string
    " go to previous window
    wincmd p
    let file_q = fnameescape(fnamemodify(a:file, ':~:.'))
    if bufnr() == g:gale_lf_buf
      au WinLeave <buffer> ++once vertical resize 30
      exe "vsplit" file_q
    else
      exe "drop" file_q
    endif
  endif
endfunction

" GaleLfRecvDir({buf}, {dir})
"
"   API endpoint for changing directory to {dir} from lf. {dir} should be a full
"   path.
"
function! GaleLfRecvDir(buf, dir) abort
  if type(a:dir) == v:t_string
    exe "cd" fnameescape(dir)
  endif
endfunction

" disarm netrw
let g:loaded_netrw = 1
let g:loaded_netrwPlugin = 1

command! GaleLf call GaleLf()
command! -nargs=1 -complete=dir GaleLfSendDir call GaleLfSendDir(<q-args>)
command! GaleLfSendCwd call GaleLfSendDir(getcwd())
noremap <C-T> <Cmd>call GaleLf()<CR>

" LATE HOOKS
" ==============================================================================

if exists("*GaleLate")
  call GaleLate()
endif

" vim:ft=vim
