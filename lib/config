#!/bin/sh
# corecon configurator

err() { printf >&2 'error: %s\n' "$1"; }
warn() { printf >&2 'warning: %s\n' "$1"; }

usage() {
  cat <<EOF
usage:
  corecon config [-l|--list]
    dump corecon configuration
  corecon config <key>[=<value>]...
    modify corecon configuration
  corecon config -t|--test <keys>...
    test for any of <keys>
  corecon config -g|--get <keys>...
    get first occurrence of any of <keys>
  corecon config -u|--unset <keys>...
    unset all <keys>
options:
  --reset     wipe the config file
  --debug     show debugging output
EOF
}

# config directory
config_dir="${XDG_CONFIG_HOME:-$HOME/.config}/corecon"
# config file
config_file="$config_dir/config"
# temporary config file
config_file_old="$config_file.old"

mode=
reset=
debug=

while [ "$#" -gt 0 ]; do
  case "$1" in
    # split single-character options
    -[!-]?*)
      rest="${1#-?}"
      set -- "${1%"$rest"}" "-$rest"
      continue
      ;;
    --help)
      usage
      exit 0
      ;;
    -t|--test)
      mode=test
      ;;
    -g|--get)
      mode=get
      ;;
    -u|--unset)
      mode=unset
      ;;
    -l|--list)
      mode=list
      ;;
    --reset)
      reset=1
      ;;
    --debug)
      debug=1
      ;;
    --)
      shift
      break
      ;;
    -*)
      err "invalid option: $1"
      exit 1
      ;;
    *)
      break
      ;;
  esac
  shift
done

test_mode() {
  [ "$#" -gt 0 ] && [ -s "$config_file" ] || exit 1

  # a `grep -Ex` pattern for finding a match
  pattern="$(printf '%s\n' "$@" | sed -E \
    -e 's/=.*//' \
    -e 's/[\.\^\$\?\*\+\[\{\(\)\|\\]/\\&/g' \
    -e 's/$/(=.*)?/')"

  [ "$debug" ] && printf 'pattern:\n%s\n' "$pattern"

  grep -Exq "$pattern" "$config_file"
}

get_mode() {
  [ "$#" -gt 0 ] && [ -s "$config_file" ] || exit 1

  # a `grep -Ex` pattern for finding a match
  pattern="$(printf '%s\n' "$@" | sed -E \
    -e 's/[\.\^\$\?\*\+\[\{\(\)\|\\]/\\&/g' \
    -e 's/$/=.*/')"

  [ "$debug" ] && printf 'pattern:\n%s\n' "$pattern"

  match="$(grep -Exm 1 "$pattern" "$config_file")" && \
    printf '%s\n' "${match#*=}"
}

unset_mode() {
  [ "$#" -gt 0 ] && [ -s "$config_file" ] || exit 0

  # a `grep -Ex` pattern for entries to remove
  pattern="$(printf '%s\n' "$@" | sed -E \
    -e 's/[\.\^\$\?\*\+\[\{\(\)\|\\]/\\&/g' \
    -e 's/$/(=.*)?/')"

  [ "$debug" ] && printf 'pattern:\n%s\n' "$pattern"

  # backup config file
  if [ -e "$config_file" ]; then
    mv "$config_file" "$config_file_old"
  fi

  mkdir -p "$config_dir"

  # pick existing entries that don't match keys provided in the command line
  grep -Exv "$pattern" "$config_file_old" > "$config_file"

  exit 0
}

list_mode() {
  # very primitive interface
  if [ -e "$config_file" ]; then
    column --table -s '=' -l 2 --table-columns KEY,VALUE "$config_file"
  fi
}

modify_mode() {
  # only proceed if arguments are present
  # or requesting a --reset
  [ "$#" -gt 0 ] || [ "$reset" ] || exit 0

  # backup config file if necessary
  if [ -e "$config_file" ]; then
    mv "$config_file" "$config_file_old"
  fi

  mkdir -p "$config_dir"

  { # unless requesting a --reset,
    # edit existing configuration if applicable
    if [ -z "$reset" ] && [ -e "$config_file_old" ]; then
      # a `grep -Ex` pattern
      pattern="$(printf '%s\n' "$@" | sed -E \
        -e 's/=.*//' \
        -e 's/[\.\^\$\?\*\+\[\{\(\)\|\\]/\\&/g' \
        -e 's/$/(=.*)?/')"

      [ "$debug" ] && printf >&2 'pattern:\n%s\n' "$pattern"

      # pick existing entries that DON'T match the keys to be modified
      grep -Exv "$pattern" "$config_file_old"
    fi

    # add new entries
    [ "$#" -gt 0 ] && printf '%s\n' "$@"
  } > "$config_file"
}

case "$mode" in
  test)   test_mode "$@" ;;
  get)    get_mode "$@" ;;
  unset)  unset_mode "$@" ;;
  list)   list_mode "$@" ;;
  *)      if [ "$#" -gt 0 ]
          then modify_mode "$@"
          else list_mode
          fi ;;
esac
