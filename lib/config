#!/bin/sh
# host-specific configurator
#
# This script generates the meta-configuration read by apply.
#
# Options specified persist across invocations of config. Thus invoking config
# with no arguments effectively does nothing unless new configuration options
# were added. Use --reset to suppress reading the configuration file and reset
# all options to their defaults.
#

datadir="${XDG_DATA_HOME:-$HOME/.local/share}/corecon"

err() { printf >&2 'error: %s\n' "$1"; }
warn() { printf >&2 'warning: %s\n' "$1"; }

usage() {
  cat <<EOF
usage: config [--reset] [<option>...]
options:
  --apply     Automatically apply changes.
  --[no-]systemd
EOF
}

shellquote() {
  if [ "$#" -gt 0 ]; then
    # each argument is fed as a line into sed
    # escape inner quotes
    # prepend and append quotes to each line
    # join arguments with spaces
    printf '%s\n' "$@" | sed "s/'/'\\\\''/g; s/^/'/; s/$/'/" | tr '\n' ' '
  fi
}

ninjaquote() {
  # replace '$' with '$$'
  # replace leading space with '$ '
  printf '%s\n' "$1" | sed 's/\$/$$/g; s/^ /$ /'
}

ninjaquote_path() {
  # escape all '$', ':', and space
  printf '%s\n' "$1" | sed 's/[\$: ]/$\&/g'
}

O_SYSTEMD=0

case "$1" in
  --help) usage; exit 0 ;;
  # use --reset to avoid sourcing $XDG_DATA_HOME/corecon/config
  # if you want to reset all options or the file is corrupted
  --reset) shift ;;
  # recall persistent configuration
  *) [ -f "$datadir/config" ] && . "$datadir/config" ;;
esac

apply=0

for opt; do
  case "$opt" in
    --reset)
      err "--reset is only recognized as the first argument"
      exit 1
      ;;
    --apply) apply=1 ;;
    --no-systemd) O_SYSTEMD=0 ;;
       --systemd) O_SYSTEMD=1 ;;
    *)
      err "invalid option: $opt"
      exit 1
      ;;
  esac
done

mkdir -p "$datadir"

# update config
rm -f "$datadir/config"
cat > "$datadir/config" <<EOF
O_SYSTEMD=$O_SYSTEMD
EOF

# apply changes if --apply is given
if [ "$apply" = 1 ]; then
  exec ~/.local/corecon/lib/apply
fi
